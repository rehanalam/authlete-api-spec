name: Update APIMatic Portal and SDKs

on:
  push:
    branches:
      - main
    paths:
      - 'spec/**'
  workflow_dispatch:

jobs:
  update-portal:
    runs-on: ubuntu-latest

    env:
      APIMATIC_API_KEY: ${{ secrets.API_KEY }}
      APIMATIC_API_ID: ${{ secrets.API_ENTITY_ID }}
     
      GH_PUSH_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
      TARGET_REPO: rehanalam/new-authlete-cs-sdk
      SDK_TEMPLATE: CS_NET_STANDARD_LIB

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Install zip/unzip
        run: sudo apt-get install -y zip unzip

      - name: Zip spec directory
        run: zip -r portal-input.zip *
        working-directory: spec

      - name: List contents of zip (debug)
        run: zip -sf portal-input.zip
        working-directory: spec

      - name: Confirm OpenAPI file exists
        run: ls -l spec/

      - name: In-place import with debug
        run: |
          curl -v -X PUT \
            --url "https://api.apimatic.io/api-entities/$APIMATIC_API_ID/import-via-file" \
            -H "user-agent: GitHub-Actions" \
            -H "Accept: application/vnd.apimatic.apiEntity.full.v1+json" \
            -H "Authorization: X-Auth-Key $APIMATIC_API_KEY" \
            -F "file=@spec/openapi-spec.json" \
            -o import-response.json

          echo "----- Response from APIMatic -----"
          cat import-response.json

      - name: Trigger SDK generation
        run: |
          curl -X POST \
            --url "https://api.apimatic.io/api-entities/$APIMATIC_API_ID/code-generations/generate" \
            -H "Accept: application/json" \
            -H "Authorization: X-Auth-Key $API_KEY" \
            -d "template=$SDK_TEMPLATE" \
            -o sdk-gen-response.json

          CODEGEN_ID=$(jq -r '.id' sdk-gen-response.json)
          echo "CODEGEN_ID=$CODEGEN_ID" >> $GITHUB_ENV
          
      - name: Publish Developer Portal
        run: |
          curl -X PUT \
            --url "https://api.apimatic.io/api-entities/$APIMATIC_API_ID/hosted-portal" \
            -H "user-agent: GitHub-Actions" \
            -H "Authorization: X-Auth-Key $APIMATIC_API_KEY"

      - name: Wait for SDK generation to complete
        run: |
          echo "Waiting 10 seconds for SDK to be ready..."
          sleep 10

      - name: Wait for SDK to be ready
        run: sleep 10

      - name: Download generated SDK
        run: |
          curl -X GET \
            -H "Authorization: X-Auth-Key $API_KEY" \
            --output sdk.zip \
            "https://api.apimatic.io/api-entities/$API_ID/code-generations/$CODEGEN_ID/generated-sdk"

      - name: Unzip SDK
        run: unzip sdk.zip -d sdk

      - name: Check if repo exists or create it
        id: check-repo
        run: |
          REPO_URL="https://api.github.com/repos/$GH_USER/$GH_REPO"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" "$REPO_URL")

          if [ "$STATUS" == "404" ]; then
            echo "Repo does not exist. Creating it..."
            curl -s -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/user/repos \
              -d "{\"name\":\"$GH_REPO\"}"
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "new_repo=true" >> $GITHUB_OUTPUT
          else
            echo "Repo exists."
            BRANCH="sdk-update-$(uuidgen | cut -c1-8)"
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "new_repo=false" >> $GITHUB_OUTPUT
          fi

      - name: Clone repo and prepare SDK
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"

          git clone https://x-access-token:$GH_TOKEN@github.com/$GH_USER/$GH_REPO.git repo
          cd repo

          if [[ "${{ steps.check-repo.outputs.new_repo }}" == "false" ]]; then
            git checkout -b ${{ steps.check-repo.outputs.branch }}
          fi

          rm -rf *
          cp -r ../sdk/* .

          git add .
          git commit -m "chore: update SDK"
          git push origin ${{ steps.check-repo.outputs.branch }}

      - name: Create PR if repo already existed
        if: steps.check-repo.outputs.new_repo == 'false'
        run: |
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GH_USER/$GH_REPO/pulls \
            -d "{
              \"title\": \"Update SDK from APIMatic\",
              \"head\": \"${{ steps.check-repo.outputs.branch }}\",
              \"base\": \"main\"
            }"


     